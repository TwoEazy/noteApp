// ===== 1. AppContainer - Dependency Injection (Simple Version) =====
// This is like a factory that creates all the objects your app needs

package com.example.note.di

import android.content.Context
import androidx.room.Room
import com.example.note.data.local.AppDatabase
import com.example.note.data.model.SessionManager
import com.example.note.repository.NoteRepository
import com.example.note.repository.AuthRepository
import com.example.note.viewmodel.LoginViewModel
import com.example.note.viewmodel.RegisterViewModel

class AppContainer(context: Context) {
    // Create the database instance
    private val database = Room.databaseBuilder(
        context,
        AppDatabase::class.java,
        "note_database"
    ).build()
    
    // Create DAOs
    private val noteDao = database.noteDao()
    
    // Create repositories
    val noteRepository = NoteRepository(noteDao)
    val authRepository = AuthRepository() // You'll need to implement this
    val sessionManager = SessionManager(context) // You'll need to implement this
    
    // Create ViewModels
    val loginViewModel = LoginViewModel(authRepository, sessionManager)
    val registerViewModel = RegisterViewModel(authRepository)
}

// ===== 2. MainActivity - The Entry Point =====

package com.example.note

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Surface
import androidx.compose.ui.Modifier
import com.example.note.di.AppContainer
import com.example.note.navigation.Navigation
import com.example.note.navigation.Screens
import com.example.note.ui.theme.NoteTheme

class MainActivity : ComponentActivity() {
    private lateinit var appContainer: AppContainer
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // Initialize the app container
        appContainer = AppContainer(this)
        
        setContent {
            NoteTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colors.background
                ) {
                    // Check if user is logged in
                    val startDestination = if (isUserLoggedIn()) {
                        Screens.AllNotes.route
                    } else {
                        Screens.Login.route
                    }
                    
                    Navigation(
                        appContainer = appContainer,
                        startDestination = startDestination
                    )
                }
            }
        }
    }
    
    private fun isUserLoggedIn(): Boolean {
        // Check SharedPreferences or SessionManager
        return appContainer.sessionManager.isLoggedIn()
    }
}

// ===== 3. SessionManager - Handles User Session =====

package com.example.note.data.model

import android.content.Context
import android.content.SharedPreferences

class SessionManager(context: Context) {
    private val prefs: SharedPreferences = context.getSharedPreferences("user_session", Context.MODE_PRIVATE)
    
    fun saveUser(userId: Int, email: String) {
        prefs.edit().apply {
            putInt("user_id", userId)
            putString("user_email", email)
            putBoolean("is_logged_in", true)
            apply()
        }
    }
    
    fun clearSession() {
        prefs.edit().clear().apply()
    }
    
    fun isLoggedIn(): Boolean = prefs.getBoolean("is_logged_in", false)
    
    fun getUserId(): Int = prefs.getInt("user_id", -1)
    
    fun getUserEmail(): String? = prefs.getString("user_email", null)
}

// ===== 4. Simple Auth Repository (Mock Implementation) =====

package com.example.note.repository

import com.example.note.data.model.User
import kotlinx.coroutines.delay

class AuthRepository {
    // Mock implementation - replace with real API calls
    suspend fun login(email: String, password: String): Result<User> {
        delay(1000) // Simulate network delay
        
        // Mock validation
        return if (email == "test@test.com" && password == "password") {
            Result.success(User(id = 1, email = email, name = "Test User"))
        } else {
            Result.failure(Exception("Invalid credentials"))
        }
    }
    
    suspend fun register(
        email: String,
        password: String,
        firstName: String,
        lastName: String
    ): Result<User> {
        delay(1000) // Simulate network delay
        
        // Mock registration - always succeeds for demo
        return Result.success(
            User(
                id = 1,
                email = email,
                name = "$firstName $lastName"
            )
        )
    }
}

// ===== 5. User Model =====

package com.example.note.data.model

data class User(
    val id: Int,
    val email: String,
    val name: String
)

// ===== 6. Login/Register ViewModels =====

package com.example.note.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.note.data.model.SessionManager
import com.example.note.repository.AuthRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class LoginViewModel(
    private val authRepository: AuthRepository,
    private val sessionManager: SessionManager
) : ViewModel() {
    
    private val _loginState = MutableStateFlow<LoginState>(LoginState.Idle)
    val loginState: StateFlow<LoginState> = _loginState
    
    fun login(email: String, password: String) {
        viewModelScope.launch {
            _loginState.value = LoginState.Loading
            
            authRepository.login(email, password)
                .onSuccess { user ->
                    sessionManager.saveUser(user.id, user.email)
                    _loginState.value = LoginState.Success
                }
                .onFailure { exception ->
                    _loginState.value = LoginState.Error(
                        exception.message ?: "Login failed"
                    )
                }
        }
    }
}

class RegisterViewModel(
    private val authRepository: AuthRepository
) : ViewModel() {
    
    private val _registerState = MutableStateFlow<RegisterState>(RegisterState.Idle)
    val registerState: StateFlow<RegisterState> = _registerState
    
    fun register(
        email: String,
        password: String,
        firstName: String,
        lastName: String
    ) {
        viewModelScope.launch {
            _registerState.value = RegisterState.Loading
            
            authRepository.register(email, password, firstName, lastName)
                .onSuccess {
                    _registerState.value = RegisterState.Success
                }
                .onFailure { exception ->
                    _registerState.value = RegisterState.Error(
                        exception.message ?: "Registration failed"
                    )
                }
        }
    }
}

sealed class LoginState {
    object Idle : LoginState()
    object Loading : LoginState()
    object Success : LoginState()
    data class Error(val message: String) : LoginState()
}

sealed class RegisterState {
    object Idle : RegisterState()
    object Loading : RegisterState()
    object Success : RegisterState()
    data class Error(val message: String) : RegisterState()
}

// ===== 7. Theme Configuration =====

package com.example.note.ui.theme

import androidx.compose.material.MaterialTheme
import androidx.compose.material.darkColors
import androidx.compose.material.lightColors
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

private val LightColorPalette = lightColors(
    primary = Color(0xFF6200EE),
    primaryVariant = Color(0xFF3700B3),
    secondary = Color(0xFF03DAC6)
)

private val DarkColorPalette = darkColors(
    primary = Color(0xFFBB86FC),
    primaryVariant = Color(0xFF3700B3),
    secondary = Color(0xFF03DAC6)
)

@Composable
fun NoteTheme(
    darkTheme: Boolean = false,
    content: @Composable () -> Unit
) {
    val colors = if (darkTheme) {
        DarkColorPalette
    } else {
        LightColorPalette
    }

    MaterialTheme(
        colors = colors,
        typography = Typography,
        shapes = Shapes,
        content = content
    )
}

// ===== 8. Import Fix for Compose =====
// Add this import in your screen files:
import androidx.compose.foundation.clickable